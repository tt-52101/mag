// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package provider

import (
	"github.com/key7men/mag/server/biz/impl"
	"github.com/key7men/mag/server/handler"
	"github.com/key7men/mag/server/model/gorm/dao"
	"github.com/key7men/mag/server/module/rbac"
	"github.com/key7men/mag/server/router"
)

// Injectors from wire.go:

func BuildInjector() (*Provider, func(), error) {
	auther, cleanup, err := InitAuth()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := InitGormDB()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	role := &dao.Role{
		DB: db,
	}
	roleMenu := &dao.RoleMenu{
		DB: db,
	}
	menuActionResource := &dao.MenuActionResource{
		DB: db,
	}
	user := &dao.User{
		DB: db,
	}
	userRole := &dao.UserRole{
		DB: db,
	}
	casbinAdapter := &rbac.CasbinAdapter{
		RoleModel:         role,
		RoleMenuModel:     roleMenu,
		MenuResourceModel: menuActionResource,
		UserModel:         user,
		UserRoleModel:     userRole,
	}
	syncedEnforcer, cleanup3, err := InitCasbin(casbinAdapter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	demo := &dao.Demo{
		DB: db,
	}
	implDemo := &impl.Demo{
		DemoModel: demo,
	}
	handlerDemo := &handler.Demo{
		DemoBiz: implDemo,
	}
	menu := &dao.Menu{
		DB: db,
	}
	menuAction := &dao.MenuAction{
		DB: db,
	}
	login := &impl.Login{
		Auth:            auther,
		UserModel:       user,
		UserRoleModel:   userRole,
		RoleModel:       role,
		RoleMenuModel:   roleMenu,
		MenuModel:       menu,
		MenuActionModel: menuAction,
	}
	handlerLogin := &handler.Login{
		LoginBiz: login,
	}
	trans := &dao.Trans{
		DB: db,
	}
	implMenu := &impl.Menu{
		TransModel:              trans,
		MenuModel:               menu,
		MenuActionModel:         menuAction,
		MenuActionResourceModel: menuActionResource,
	}
	handlerMenu := &handler.Menu{
		MenuBll: implMenu,
	}
	implRole := &impl.Role{
		Enforcer:      syncedEnforcer,
		TransModel:    trans,
		RoleModel:     role,
		RoleMenuModel: roleMenu,
		UserModel:     user,
	}
	handlerRole := &handler.Role{
		RoleBll: implRole,
	}
	implUser := &impl.User{
		Enforcer:      syncedEnforcer,
		TransModel:    trans,
		UserModel:     user,
		UserRoleModel: userRole,
		RoleModel:     role,
	}
	handlerUser := &handler.User{
		UserBll: implUser,
	}
	routerRouter := &router.Router{
		Auth:           auther,
		CasbinEnforcer: syncedEnforcer,
		DemoAPI:        handlerDemo,
		LoginAPI:       handlerLogin,
		MenuAPI:        handlerMenu,
		RoleAPI:        handlerRole,
		UserAPI:        handlerUser,
	}
	engine := InitGinEngine(routerRouter)
	provider := &Provider{
		Engine:         engine,
		Auth:           auther,
		CasbinEnforcer: syncedEnforcer,
		MenuBiz:        implMenu,
	}
	return provider, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
